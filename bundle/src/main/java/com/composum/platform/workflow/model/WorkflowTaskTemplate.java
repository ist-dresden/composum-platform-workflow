package com.composum.platform.workflow.model;

import com.composum.platform.workflow.service.WorkflowService;
import com.composum.sling.core.BeanContext;
import com.composum.sling.core.bean.BeanFactory;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.resource.Resource;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * a model class of a workflow task template
 * <p>
 * such a template is declared as resource in the repository and referenced by its repository path;
 * task instances can not 'live' without their template and processing options of a template
 * are usually referencing a following task template
 * </p><p>
 * BeanFactory - an instance of this abstract class can only be generated by the WorkflowService
 * </p>
 */
@BeanFactory(serviceClass = WorkflowService.class)
public abstract class WorkflowTaskTemplate extends WorkflowTask {

    /** the resource type to identify a resource as workflow task template */
    public static final String TEMPLATE_TYPE = "composum/platform/workflow/task/template";

    /** the generic task procession dialog; the default value if a template hasn't declared ist own dialog type */
    public static final String DEFAULT_DIALOG = "composum/platform/workflow/dialog";

    /** the procession options list of the template */
    private transient LinkedHashMap<String, Option> options;

    @Override
    public void initialize(BeanContext context, Resource resource) {
        super.initialize(context, resource);
        getOptionsMap(); // preload to use the open context
    }

    @Nonnull
    public String getResourceType() {
        return TEMPLATE_TYPE;
    }

    /** must be implemented by the service; produces an option instance */
    @Nonnull
    public abstract Option createOption(Resource resource);

    /**
     * @return 'true' if this instance is not the first instance of the same template (path) in the workflow
     */
    public abstract boolean isWorkflowLoop();

    @Nonnull // but probably empty
    public String[] getCategory() {
        return getProperty(PN_CATEGORY, new String[0]);
    }

    @Nonnull // but probably empty
    public String getTopic() {
        return getProperty(PN_TOPIC, "");
    }

    /**
     * @return the locale variation of the template title
     */
    @Nonnull
    public String getTitle() {
        return i18n().get(PN_TITLE, getName());
    }

    /**
     * @return the locale variation of the template hint (short description)
     */
    @Nonnull // but probably empty
    public String getHint() {
        return i18n().get(PN_HINT, "");
    }

    /**
     * @return the locale variation of the message to inform about a task creation
     */
    @Nonnull // but probably empty
    public String getHintAdded(@Nonnull String alternativeText) {
        return i18n().get(PN_HINT_ADDED, alternativeText);
    }

    /**
     * @return the value of the 'autoRun' property;
     * if 'true' each instance of this template wil be processed immediately after creation
     */
    public boolean isAutoRun() {
        return getProperty(PN_AUTO_RUN, Boolean.FALSE);
    }

    /**
     * @return the resource type of the dialog component to use for processing an instance of this template
     */
    @Nonnull
    public String getDialog() {
        return getProperty(PN_DIALOG, DEFAULT_DIALOG);
    }

    /**
     * @param key the options name in the repository; if 'null' the default option is used
     * @return the option if available otherwise 'null'
     */
    @Nullable
    public Option getOption(@Nullable final String key) {
        Map<String, Option> options = getOptionsMap();
        if (StringUtils.isNotBlank(key)) {
            return options.get(key);
        } else {
            for (Option option : options.values()) {
                if (option.isDefault()) {
                    return option;
                }
            }
        }
        return null;
    }

    /**
     * @return the list of available processing options
     */
    @Override
    @Nonnull // but probably empty
    public Collection<Option> getOptions() {
        return getOptionsMap().values();
    }

    @Nonnull
    protected LinkedHashMap<String, Option> getOptionsMap() {
        if (options == null) {
            options = new LinkedHashMap<>();
            Resource optionsRes = resource.getChild(PP_OPTIONS);
            if (optionsRes != null) {
                for (Resource option : optionsRes.getChildren()) {
                    options.put(option.getName(), createOption(option));
                }
            }
        }
        return options;
    }

    // Object

    @Override
    public String toString() {
        return super.toString() + "{" + getPath() + ",loop:" + isWorkflowLoop() + "}";
    }

    @Override
    public boolean equals(Object other) {
        return other instanceof WorkflowTaskTemplate && getPath().equals(((WorkflowTaskTemplate) other).getPath());
    }

    @Override
    public int hashCode() {
        return getPath().hashCode();
    }
}
